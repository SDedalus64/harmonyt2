Below is a concise inventory of the major visible elements rendered by `LookupScreen.tsx`.  
Each row is “pipe-delimited” exactly as requested.

Element | Purpose / Type | Text / Placeholder | Styles File & Section (lines) | Primary Dimension Rules | X / Y Positioning Rules | zIndex & Reason  
---|---|---|---|---|---|---  
`HTS Code Field` | Numeric input (TextInput) | “HTS Code” | `LookupScreen.tsx` – `styles.input` |3030-3060) | `height: getResponsiveValue(46,54)` → 46 px on phone, 54 px on tablet; `width:"100%"`; `borderRadius:getBorderRadius("md")`→ 12 px| Laid out with flex in `dropdownFieldsRow`; no absolute X/Y values; inherits its column’s flow | `zIndex: 999` is applied to suggestions, not to the field itself (field is 0) – keeps dropdown above all  
`HTS Suggestions` | Dropdown list (ScrollView) | Dynamic codes | `LookupScreen.tsx` – `styles.suggestionsContainer` |3070-3090) | `maxHeight:getResponsiveValue(325,550)` limits list; full-width | `position:"absolute"; top:46/54` lines it up under field | `zIndex:15` so the list overlays all other form items  
`Origin Country` | Custom dropdown (`CountryLookup`) | “Origin” | Component’s own styles + wrapper gets `styles.input` (same section) | Same dimensions as input field | Flex-box row, no explicit X/Y | 0 – covered only by its own dropdown which has zIndex in `CountryLookup`  
`Declared Value` | Numeric input | “Declared Value (USD)” | `styles.input` |3030-3060) | Same as HTS Code field | Flex flow | 0  
`Est. Other Costs` | Numeric input | “Est. Other Costs (Optional)” | `styles.input` |3030-3060) | Same dimensions | Flex flow | 0  
`Unit Count` | Numeric input | “Unit Count (Optional)” | `styles.input` |3030-3060) | Same dimensions | Flex flow | 0  
`Calculate Button` | Primary action (`TouchableOpacity`) | Label “Calculate” | `LookupScreen.tsx` – `styles.searchButton` |3150-3175) | `height:getResponsiveValue(40,48)`; horizontal padding 16/20; `borderRadius:md` | Inside `styles.actionButtonsRow`; that row has `position:"absolute"; bottom:getResponsiveValue(120,140)` → fixed above footer | `zIndex:30` (inline) so it sits on top of ScrollView and is touchable  
`Clear Button` | Secondary action (`TouchableOpacity`) | Label “Clear” | `styles.clearButton` |3180-3200) | Same height as Calculate; orange bg | Same actionButtonsRow container | Inherits zIndex 30 from parent  
`Floating Main FAB` | Menu toggle (Animated) | `Ionicons("menu")` | `styles.mainFloatingFabButton` |3240-3270) | `width/height:getResponsiveValue(45,74)`; circular (borderRadius = half) | `heroFloatingMenuContainer` uses `position:"absolute"; bottom:5/15; left:20/50` | `zIndex:100` so it floats above all UI  
`Mini FABs` (History, Links, News, etc.) | Secondary actions | Icons only | `styles.menuFabButton` |3230-3240) | 38 × 38 (phones) / 64 × 64 (tablets) | Animated X/Y transforms computed in `toggleMainFab` | `zIndex:100` (share parent) to stay clickable  
`Results Drawer` | Bottom slide-up (`AnimatedDrawer`) | Search results | Drawer wrapper in render (≈ lines 2710-2725); content styles `styles.resultsDrawerContent` |3295-3360) | Drawer height = screen height × 0.85 (config) | `position:"bottom"` in `AnimatedDrawer`; translationY animates | `zIndex` handled inside `AnimatedDrawer` (> modal overlay) so results sit over main screen  
`Tariff Engineering Drawer` | Right slide-in comparison panel | TariffEngineeringComparison component | Drawer wrapper lines <>2840-2860; comparison component styles in `TariffEngineeringComparison.tsx` | Drawer width = screen × 0.85 (default right drawer) | `position:"right"`; translationX animates | High `zIndex` within `AnimatedDrawer` so it overlays everything  
`History Drawer` | Bottom slide-up list | Recent lookups | Drawer wrapper |2600-2625); `renderHistoryDrawerContent` styles |1600-1640) | Same bottom-drawer config | position bottom | High zIndex via AnimatedDrawer  
`News Drawer` | Right slide-in | Trade-news cards | Wrapper lines <>2625-2645; styles in RightColumnContent component | Drawer width same as right drawer | Animated position right | High zIndex  
`Analytics Drawer` | Left slide-in | Trade insights | Wrapper <>2645-2665; content styles <>1660-1690 | Drawer width same as left drawer | Position left | High zIndex  
`Info Tab` | Floating info icon (iPhone only) | `Ionicons("information-circle")` | `styles.infoTab` |3210-3218) | Fixed `width/height:40`; border on half-pill shape | `position:"absolute"; left:-10; top:tabY` where tabY is measured from field | `zIndex:3000` so it stays above everything and receives drag gestures  
`Data Source Banner` | Gradient footer banner | 3 text lines | `styles.dataSourceInfoContainer` & `styles.dataSourceGradient` |3220-3230) | Full-width gradient; padding xs/md | `position:"absolute"; bottom:10; left/right:0` | `zIndex:1000` so it overlays scroll content but under FABs  

Notes on helpers referenced above  
• `getResponsiveValue(phone,tablet)` – returns the first value on phones, second on tablets.  
• `getSpacing("md")`, `getBorderRadius("md")`, etc. – tokenised theme helpers returning platform-consistent numeric values.  
• Most inputs/buttons rely on flex layout, so there are no explicit X/Y coordinates; they acquire position from their parent rows.  
• Drawer components inherit high z-indices from `AnimatedDrawer` so they overlay the main screen and remain touch-interactive.